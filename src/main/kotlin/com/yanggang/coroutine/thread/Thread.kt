package com.yanggang.coroutine.thread

/*
스레드와 코루틴 차이점

(특징 1)
프로세스: 컴퓨터에서 실행되는 프로그램

스레드:
- 프로세스보다 작은 개념
- 프로세스에 소속되어 여러 코드를 동시에 실핼할 수 있게 해줌
- 멀티 스레드 환경이라 하면 한 프로세스에서 여러 스레드를 가지고 있고 특정 코드가 특정 스레드에 들어와
동시에 실행되는 것처럼 돌릴 수 있음

프로세스 > 스레드 > 코루틴
: 프로세스가 스레드 보다 큰 개념이듯이 스레드 보다 코루틴이 큰 개념임

다만, 스레드-코루틴을 프로세스-스레드에 빗대기에는 다른점이 있음
- 프로세스가 있어야만 스레드가 있을 수 있다
- 스레드가 프로세스를 바꿀 수는 없다

- 코루틴이 실행되려면, 코루틴이 가지고 있는 코드를 스레드에 넘겨서 실행함
- 그러나 스레드는 특정 프로세스에 종속되어 있지만 코루틴은 특정 스레드에 종속되어 있는 개념이 아님
(코루틴은 중단되었다가 재개될때 다른 스레드에 배정될 수 있음)
예:
코루틴1 - |코드1| |중단| |코드2|
코루틴2 - |코드3|
코루틴3 - |코드4|

스레드1, 스레드2 가 있다고 할때, 코루틴1 의 |코드1| 이 스레드1 에서 실행되고
|중단| 되었다가 다시 실행될때 |코드2| 는 스레드2 에서 실행될 수 있음


(특징 2)
Context Switching 에서도 차이가 있음

프로세스에서 Context Switching 이 일어나면, 프로세스는 각각 완전히 독립된 메모리(Heap, Stack)를 가지고 있음
예:
CPU Core 에서 프로세스1 을 가져가 실행시킬때 프로세스1 의 메모리를 쓰고 있다가 Context Switching 이 일어나면
프로세스2 의 메모리를 완전히 갈아 끼워야함
-> 모든 메모리가 교체 되므로 비용이 많이 발생한다


스레드에서 Context Switching 이 일어나면, Heap 메모리를 공유하고 Stack 만 공유되므로 프로세스보다 비용이 적다
예:
프로세스
    스레드1 - |코드1| |코드2|
    스레드2 - |코드3| |코드4|

스레드1 의 |코드1| 이 실행될때 (Heap Area, Stack Area 1) 이 CPU 캐시 등에 적재되어 활용되다가
OS가 스레드1 을 멈추고 스레드2의 |코드3| 을 실행시킬때는 Heap Area 는 그대로 둔채 Stack Area 2 만 갈아끼우는 방식으로 동작


동일 스레드에서 코루틴이 실행되면, 메모리 전부를 공유하므로 스레드보다 Context Switching 비용이 적다
예:
코루틴1 - |코드1| |중단| |코드2|
코루틴2 - |코드3|

코루틴1 |코드1| 이 스레드에 배정되어 (Heap Area, Stack Area 1) 를 가지고 실행되다가 |중단| 되어 멈추고
코루틴2 에 자리를 양보하여 |코드3| 을 스레드에 넘기면 여전히 (Heap Area, Stack Area 1) 를 사용한다

여기서 스레드는 하나만 있지만, 마치 두개의 코루틴이 동시에 실행되는 것처럼 보인다
-> 하나의 스레드에서도 '동시성' 을 확보할 수 있다

(참고)
동시성: 한번에 한가지 일만 할 수 있지만 아주 빠르게 작업이 전환되어 동시에 하는 것처럼 보이는 것
병렬성: 실제 코어가 여러개 있어서(CPU multi-core) 두가이 일을 다른 코어가 맡아 동시에 하는


(특징 3)
코루틴은 스레드와 다르게 스스로 자리를 양보할 수 있다
반면 스레드끼리 자리가 바뀔때는 OS 가 개입해서 스레드를 멈추고 다른 스레드를 돌게함
예:
코루틴1 - |코드1| |중단| |코드2|  (yield() 함수로 양)
코루틴2 - |코드3|

비선점형: 스스로 자리를 양보하는 것
선점형: 스레드 처럼 어떤 다른 존재(예: OS)가 직접적으로 개입해서 자리가 바뀌는 것


(정리)
스레드
- 프로세스 보다 작음 개념
- 한 스레드는 오직 한 프로세스에만 포함되어 있다
- Context Switching 이 발생하면 Stack Area 가 교체된다
- OS 가 스레드를 멈추고 다른 스레드를 실행한다 (= 선점형)

코루틴
- 스레드 보다 작은 개념
- 한 코루틴 코드는 여러 스레드에서 실행될 수 있다
- (한 스레드에서 실행하는 경우) Context Switching 이 발생하면 메모리 교체가 없다
- 코루틴 스스로가 다른 코루틴에 양보한다 (= 비선점형)
*/
